{"status":"ok","feed":{"url":"https://medium.com/feed/@atitbimali10","title":"Stories by Atit Bimali on Medium","link":"https://medium.com/@atitbimali10?source=rss-4a298c95c81f------2","author":"","description":"Stories by Atit Bimali on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*nHPY89N-MEGojWerYYn3cw.jpeg"},"items":[{"title":"The Rising Costs of APIs: Implications for Developers and the Innovation Landscape","pubDate":"2023-06-11 11:18:24","link":"https://medium.com/@atitbimali10/the-rising-costs-of-apis-implications-for-developers-and-the-innovation-landscape-654cf00442de?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/654cf00442de","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bfOI5bpxpNuBsjS0\"><figcaption>Photo by <a href=\"https://unsplash.com/@dole777?utm_source=medium&amp;utm_medium=referral\">dole777</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>In today\u2019s rapidly digitizing society, the role of APIs (Application Programming Interfaces) has become increasingly pivotal. APIs serve as the vital link enabling seamless interaction between different software programs. Their significance is particularly evident in the realm of social media platforms like Twitter and Reddit. However, within the developer community, there is a mounting concern regarding the escalating costs associated with these platforms\u2019 APIs.</p>\n<p>Following Elon Musk\u2019s acquisition of the popular social media platform Twitter in 2022, the developer community witnessed significant changes, one of which has been met with resistance\u200a\u2014\u200athe exorbitant cost of API\u00a0access.</p>\n<p>An API functions as a conduit, enabling businesses and developers to extract the necessary data without unnecessary complexities. While users engage with Twitter\u2019s visual interface, developers require a means to directly extract meaningful and structured data. Prior to Musk\u2019s intervention, Twitter\u2019s API was largely free, providing developers and business owners alike with accessible data extraction and business automation capabilities.</p>\n<p>However, with the introduction of Twitter API version 2, the landscape underwent a drastic transformation. The new version implemented multiple tiers\u200a\u2014\u200aFree, Basic, Pro, and Enterprise\u200a\u2014\u200aeach offering different levels of service. While the free tier still exists, the gap between the free and basic tiers, with the latter costing $100 per month, has raised concerns. This poses a significant expense for those exploring side projects or testing out ideas, as it entails recurring monthly costs. The Pro tier is even more extravagant, demanding $5,000 per\u00a0month.</p>\n<p>Upon examining the actual costs incurred by Twitter in providing API services, it becomes apparent that the pricing may primarily account for data access and convenience. Drawing a comparison with AWS Lambda, an on-demand code execution service offered by Amazon Web Services, the actual execution cost appears to be minimal. Even factoring in additional charges like data transfer and database queries, the maximum amount Twitter would need to spend for a client on the Basic plan is approximately $20 per month. This suggests that the plan may be priced five times higher than necessary.</p>\n<p>This approach of monetizing APIs is not limited to Twitter alone. Reddit, another prominent social media platform, has contemplated adopting a similar model. Reddit\u2019s proposed charge for 50 million API requests stands at $12,000\u200a\u2014\u200aan amount significantly higher than the cost per million API requests using AWS\u00a0Lambda.</p>\n<p>With such exorbitant API costs, there is a growing risk that developers may resort to data scraping. Although web scraping can impose a higher server-side load compared to API calls, it could prove to be a more cost-effective method in the face of steep API\u00a0charges.</p>\n<p>The trend of monetizing APIs pursued by social media platforms raises critical concerns within the developer community. While it is understandable that these platforms need to generate revenue, there is an escalating demand for striking a balance that doesn\u2019t stifle innovation or hinder the progress of small-scale developers and projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=654cf00442de\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bfOI5bpxpNuBsjS0\"><figcaption>Photo by <a href=\"https://unsplash.com/@dole777?utm_source=medium&amp;utm_medium=referral\">dole777</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>In today\u2019s rapidly digitizing society, the role of APIs (Application Programming Interfaces) has become increasingly pivotal. APIs serve as the vital link enabling seamless interaction between different software programs. Their significance is particularly evident in the realm of social media platforms like Twitter and Reddit. However, within the developer community, there is a mounting concern regarding the escalating costs associated with these platforms\u2019 APIs.</p>\n<p>Following Elon Musk\u2019s acquisition of the popular social media platform Twitter in 2022, the developer community witnessed significant changes, one of which has been met with resistance\u200a\u2014\u200athe exorbitant cost of API\u00a0access.</p>\n<p>An API functions as a conduit, enabling businesses and developers to extract the necessary data without unnecessary complexities. While users engage with Twitter\u2019s visual interface, developers require a means to directly extract meaningful and structured data. Prior to Musk\u2019s intervention, Twitter\u2019s API was largely free, providing developers and business owners alike with accessible data extraction and business automation capabilities.</p>\n<p>However, with the introduction of Twitter API version 2, the landscape underwent a drastic transformation. The new version implemented multiple tiers\u200a\u2014\u200aFree, Basic, Pro, and Enterprise\u200a\u2014\u200aeach offering different levels of service. While the free tier still exists, the gap between the free and basic tiers, with the latter costing $100 per month, has raised concerns. This poses a significant expense for those exploring side projects or testing out ideas, as it entails recurring monthly costs. The Pro tier is even more extravagant, demanding $5,000 per\u00a0month.</p>\n<p>Upon examining the actual costs incurred by Twitter in providing API services, it becomes apparent that the pricing may primarily account for data access and convenience. Drawing a comparison with AWS Lambda, an on-demand code execution service offered by Amazon Web Services, the actual execution cost appears to be minimal. Even factoring in additional charges like data transfer and database queries, the maximum amount Twitter would need to spend for a client on the Basic plan is approximately $20 per month. This suggests that the plan may be priced five times higher than necessary.</p>\n<p>This approach of monetizing APIs is not limited to Twitter alone. Reddit, another prominent social media platform, has contemplated adopting a similar model. Reddit\u2019s proposed charge for 50 million API requests stands at $12,000\u200a\u2014\u200aan amount significantly higher than the cost per million API requests using AWS\u00a0Lambda.</p>\n<p>With such exorbitant API costs, there is a growing risk that developers may resort to data scraping. Although web scraping can impose a higher server-side load compared to API calls, it could prove to be a more cost-effective method in the face of steep API\u00a0charges.</p>\n<p>The trend of monetizing APIs pursued by social media platforms raises critical concerns within the developer community. While it is understandable that these platforms need to generate revenue, there is an escalating demand for striking a balance that doesn\u2019t stifle innovation or hinder the progress of small-scale developers and projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=654cf00442de\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["twitter-api","twitter","elon-musk","meta","api"]},{"title":"Breaking the Code: How I Hacked a Site and Gained Control Over Any Blog Post","pubDate":"2023-04-27 14:58:12","link":"https://medium.com/@atitbimali10/breaking-the-code-how-i-hacked-a-site-and-gained-control-over-any-blog-post-d1df4fc4fa03?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/d1df4fc4fa03","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X3_ZTslTD2Xrhlqz\"><figcaption>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral\">Ferenc Almasi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>As a web developer, I know how important it is to prioritize website security. However, it wasn\u2019t until I stumbled upon a vulnerability on sites that I truly realized the potential dangers of not properly validating user requests. I will refer the site as \u201c<strong>ABC\u201d as</strong> of\u00a0now.</p>\n<p>\u201c<strong>ABC</strong>\u201d is a site that provides helpful blogs on topics related to web development. I had come across it a few times while searching for information on Django. One day, while browsing the site, I noticed something interesting when I had a mitm proxy running in the background.</p>\n<p>I decided to sign up for the site using my Google account, and everything seemed to be normal. I decided to test out the UI by writing a simple article. After adding one line of text, an image, and saving the post, I updated it. As I was looking at the requests being sent to the server, I noticed something strange.</p>\n<p>The article ID was being sent as a request, and there was no validation to check if the user making the request was the original user who posted it. This meant that anyone could make a request to edit any blog post and the server would accept it without question.</p>\n<p>I was able to exploit this vulnerability and edit any blog post on the site, changing the status to \u201capproved\u201d by myself. This was a serious security risk that could have had major consequences if someone with malicious intent had taken advantage of\u00a0it.</p>\n<p>This experience made me realize how crucial it is to properly validate user requests. When a user requests to edit a blog post, the server should check whether the request was made by the original user who created the post. If the credentials do not match, the server should reject the\u00a0request.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d1df4fc4fa03\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X3_ZTslTD2Xrhlqz\"><figcaption>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral\">Ferenc Almasi</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>As a web developer, I know how important it is to prioritize website security. However, it wasn\u2019t until I stumbled upon a vulnerability on sites that I truly realized the potential dangers of not properly validating user requests. I will refer the site as \u201c<strong>ABC\u201d as</strong> of\u00a0now.</p>\n<p>\u201c<strong>ABC</strong>\u201d is a site that provides helpful blogs on topics related to web development. I had come across it a few times while searching for information on Django. One day, while browsing the site, I noticed something interesting when I had a mitm proxy running in the background.</p>\n<p>I decided to sign up for the site using my Google account, and everything seemed to be normal. I decided to test out the UI by writing a simple article. After adding one line of text, an image, and saving the post, I updated it. As I was looking at the requests being sent to the server, I noticed something strange.</p>\n<p>The article ID was being sent as a request, and there was no validation to check if the user making the request was the original user who posted it. This meant that anyone could make a request to edit any blog post and the server would accept it without question.</p>\n<p>I was able to exploit this vulnerability and edit any blog post on the site, changing the status to \u201capproved\u201d by myself. This was a serious security risk that could have had major consequences if someone with malicious intent had taken advantage of\u00a0it.</p>\n<p>This experience made me realize how crucial it is to properly validate user requests. When a user requests to edit a blog post, the server should check whether the request was made by the original user who created the post. If the credentials do not match, the server should reject the\u00a0request.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d1df4fc4fa03\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["cybersecurity-awareness","cybersecurity","api","hacking","vulnerability"]},{"title":"Dockerizing your Django Web Application","pubDate":"2022-12-25 05:53:29","link":"https://awstip.com/dockerizing-your-django-web-application-8ccaee0d52ea?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/8ccaee0d52ea","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*I16iTgHUKLc558Dp.png\"><figcaption>Docker, django, gunicorn, nginx,\u00a0aws</figcaption></figure><p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. This makes it easier to develop, test, and deploy applications, because you can be sure that your application will work in any environment that has Docker installed.</p>\n<p>In this article, we\u2019ll walk through the process of using Docker with a Django web application.</p>\n<h3>Prerequisites</h3>\n<p>Before you start, you\u2019ll need to have the following installed on your\u00a0machine:</p>\n<ul><li>Docker: You can download Docker from the <a href=\"https://www.docker.com/\">Docker\u00a0website</a>.</li></ul>\n<h3>Step 1: Create a Docker\u00a0file</h3>\n<p>The first step in using Docker with a Django web application is to create a Dockerfile. This file contains the instructions for building the Docker image for your application.</p>\n<p>To create a Dockerfile, create a new file in the root directory of your Django project and name it Dockerfile. Then, open the file in a text editor and add the following lines:</p>\n<pre>FROM python:3.8<br><br>COPY requirements.txt .<br>RUN pip install -r requirements.txt<br><br>COPY . .<br><br>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]</pre>\n<p>Let\u2019s go over each line in this Dockerfile:</p>\n<ul>\n<li>FROM python:3.8: This line specifies the base image that we want to use for our application. In this case, we're using the official Python image with version\u00a03.8.</li>\n<li>COPY requirements.txt\u00a0.: This line copies the requirements.txt file from the root directory of our Django project into the image. This file contains a list of all of the Python packages that our application requires.</li>\n<li>RUN pip install -r requirements.txt: This line installs all of the required Python packages using the pip package\u00a0manager.</li>\n<li>COPY\u00a0.\u00a0.: This line copies the rest of the files in the root directory of our Django project into the image. This includes all of the Django source code and other files that our application needs.</li>\n<li>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]: This line specifies the command to run the Django development server. This will allow us to run our application in a development environment using\u00a0Docker.</li>\n</ul>\n<h3>Step 2: Build the Docker\u00a0image</h3>\n<p>Now that we have a Dockerfile, we can use it to build the Docker image for our Django application.</p>\n<p>To build the image, open a terminal and navigate to the root directory of your Django project. Then, run the following command:</p>\n<pre>docker build -t myproject .</pre>\n<p>This will build the Docker image using the instructions in the Dockerfile. The -t flag specifies a name for the image, which in this case is \"myproject\". The\u00a0. at the end of the command tells Docker to look for the Dockerfile in the current directory.</p>\n<h3>Step 3: Run the Docker\u00a0image</h3>\n<p>Once the Docker image has been built, we can use it to run our Django application.</p>\n<p>To run the image, use the following command:</p>\n<pre>docker run -p</pre>\n<h3><strong>Useful resources to learn more about using Docker with\u00a0Django:</strong></h3>\n<ul>\n<li>The official Docker documentation has a <a href=\"https://docs.docker.com/compose/django/\">Getting Started with Django</a> tutorial that shows you how to use Docker to set up and run a Django web application.</li>\n<li>The Django documentation has a <a href=\"https://docs.djangoproject.com/en/3.1/howto/deployment/docker/\">Docker tutorial</a> that covers using Docker with Django in more\u00a0detail.</li>\n<li>\n<a href=\"https://docs.docker.com/compose/\">Docker Compose</a> is a tool that allows you to define and run multi-container Docker applications. It is particularly useful for Django applications, as it allows you to define the different components of your application (such as the web server, database, and background workers) in a single configuration file.</li>\n<li>The <a href=\"https://djangopackages.org/\">Django Packages</a> website has a list of Django packages that can help you with various aspects of using Docker with Django, such as deploying Django applications to Docker containers or managing Docker containers from within\u00a0Django.</li>\n<li>\n<a href=\"https://realpython.com/\">Real Python</a> has a <a href=\"https://realpython.com/docker-django/\">tutorial on using Docker with Django</a> that covers the basics of using Docker with Django and goes into more advanced topics such as using Docker Compose and deploying Django applications to production.</li>\n</ul>\n<p>If you have any further questions or need additional guidance, don\u2019t hesitate to ask. I\u2019m here to help! Thank you for reading, and I hope you found the information helpful.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gHB7APpY9AjPnQkd\"><figcaption>Photo by <a href=\"https://unsplash.com/@toddcravens?utm_source=medium&amp;utm_medium=referral\">Todd Cravens</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8ccaee0d52ea\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/dockerizing-your-django-web-application-8ccaee0d52ea\">Dockerizing your Django Web Application</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*I16iTgHUKLc558Dp.png\"><figcaption>Docker, django, gunicorn, nginx,\u00a0aws</figcaption></figure><p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. This makes it easier to develop, test, and deploy applications, because you can be sure that your application will work in any environment that has Docker installed.</p>\n<p>In this article, we\u2019ll walk through the process of using Docker with a Django web application.</p>\n<h3>Prerequisites</h3>\n<p>Before you start, you\u2019ll need to have the following installed on your\u00a0machine:</p>\n<ul><li>Docker: You can download Docker from the <a href=\"https://www.docker.com/\">Docker\u00a0website</a>.</li></ul>\n<h3>Step 1: Create a Docker\u00a0file</h3>\n<p>The first step in using Docker with a Django web application is to create a Dockerfile. This file contains the instructions for building the Docker image for your application.</p>\n<p>To create a Dockerfile, create a new file in the root directory of your Django project and name it Dockerfile. Then, open the file in a text editor and add the following lines:</p>\n<pre>FROM python:3.8<br><br>COPY requirements.txt .<br>RUN pip install -r requirements.txt<br><br>COPY . .<br><br>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]</pre>\n<p>Let\u2019s go over each line in this Dockerfile:</p>\n<ul>\n<li>FROM python:3.8: This line specifies the base image that we want to use for our application. In this case, we're using the official Python image with version\u00a03.8.</li>\n<li>COPY requirements.txt\u00a0.: This line copies the requirements.txt file from the root directory of our Django project into the image. This file contains a list of all of the Python packages that our application requires.</li>\n<li>RUN pip install -r requirements.txt: This line installs all of the required Python packages using the pip package\u00a0manager.</li>\n<li>COPY\u00a0.\u00a0.: This line copies the rest of the files in the root directory of our Django project into the image. This includes all of the Django source code and other files that our application needs.</li>\n<li>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]: This line specifies the command to run the Django development server. This will allow us to run our application in a development environment using\u00a0Docker.</li>\n</ul>\n<h3>Step 2: Build the Docker\u00a0image</h3>\n<p>Now that we have a Dockerfile, we can use it to build the Docker image for our Django application.</p>\n<p>To build the image, open a terminal and navigate to the root directory of your Django project. Then, run the following command:</p>\n<pre>docker build -t myproject .</pre>\n<p>This will build the Docker image using the instructions in the Dockerfile. The -t flag specifies a name for the image, which in this case is \"myproject\". The\u00a0. at the end of the command tells Docker to look for the Dockerfile in the current directory.</p>\n<h3>Step 3: Run the Docker\u00a0image</h3>\n<p>Once the Docker image has been built, we can use it to run our Django application.</p>\n<p>To run the image, use the following command:</p>\n<pre>docker run -p</pre>\n<h3><strong>Useful resources to learn more about using Docker with\u00a0Django:</strong></h3>\n<ul>\n<li>The official Docker documentation has a <a href=\"https://docs.docker.com/compose/django/\">Getting Started with Django</a> tutorial that shows you how to use Docker to set up and run a Django web application.</li>\n<li>The Django documentation has a <a href=\"https://docs.djangoproject.com/en/3.1/howto/deployment/docker/\">Docker tutorial</a> that covers using Docker with Django in more\u00a0detail.</li>\n<li>\n<a href=\"https://docs.docker.com/compose/\">Docker Compose</a> is a tool that allows you to define and run multi-container Docker applications. It is particularly useful for Django applications, as it allows you to define the different components of your application (such as the web server, database, and background workers) in a single configuration file.</li>\n<li>The <a href=\"https://djangopackages.org/\">Django Packages</a> website has a list of Django packages that can help you with various aspects of using Docker with Django, such as deploying Django applications to Docker containers or managing Docker containers from within\u00a0Django.</li>\n<li>\n<a href=\"https://realpython.com/\">Real Python</a> has a <a href=\"https://realpython.com/docker-django/\">tutorial on using Docker with Django</a> that covers the basics of using Docker with Django and goes into more advanced topics such as using Docker Compose and deploying Django applications to production.</li>\n</ul>\n<p>If you have any further questions or need additional guidance, don\u2019t hesitate to ask. I\u2019m here to help! Thank you for reading, and I hope you found the information helpful.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gHB7APpY9AjPnQkd\"><figcaption>Photo by <a href=\"https://unsplash.com/@toddcravens?utm_source=medium&amp;utm_medium=referral\">Todd Cravens</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8ccaee0d52ea\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/dockerizing-your-django-web-application-8ccaee0d52ea\">Dockerizing your Django Web Application</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["dockerizing-your-django","django-and-docker","docker","django"]},{"title":"Make the most out of the templates with Django custom template tags","pubDate":"2022-12-20 15:47:45","link":"https://awstip.com/make-the-most-out-of-the-templates-with-django-custom-template-tags-9cae3fd0a792?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/9cae3fd0a792","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q2nbco0htO33lZvH.jpg\"><figcaption>custom template tags\u00a0Django</figcaption></figure><p><strong>What are custom template tags in\u00a0Django?</strong></p>\n<p>In Django, template tags are bits of code that are inserted into templates to perform tasks, such as displaying a list of objects, or rendering a form. Template tags can be divided into two categories: built-in tags, which are included in Django, and custom tags, which are created by the developer to perform specific\u00a0tasks.</p>\n<p>Custom template tags are a powerful and flexible way to perform tasks in Django templates. They allow you to encapsulate complex logic in a single tag, and reuse that logic across multiple templates. This can make your templates more readable and easier to maintain.</p>\n<p><strong>Here\u2019s how you can use\u00a0them</strong></p>\n<p>To use custom template tags, you need to create a Django app and define the tags in a templatetags module within the app. The templatetags module should contain a Python module with the same name as the app, and the module should define a register object. The register object is a template tag library that contains the custom tags for the\u00a0app.</p>\n<p>Here\u2019s an example of how to define a custom template tag in\u00a0Django:</p>\n<pre># myapp/templatetags/myapp_tags.py<br>from django import template<br><br>register = template.Library()<br><br>@register.simple_tag<br>def greeting(name):<br>    return \"Hello, \" + name</pre>\n<p>To use the custom template tag in a template, you need to first load the myapp_tags module, and then call the tag using the {% %} syntax. Here's an example of how to use the greeting tag in a template:</p>\n<pre>{% load myapp_tags %}<br><br>{% greeting \"John\" %}</pre>\n<p>This will output the string \u201cHello, John\u201d in the template.</p>\n<p>You can also define more complex template tags that take arguments and perform more advanced tasks. For example, you could define a template tag that displays a list of objects from a database, or that renders a\u00a0form.</p>\n<blockquote><strong>Free resources to learn more about custom template tags in\u00a0Django:</strong></blockquote>\n<ol>\n<li>Django documentation: The Django documentation has a section on custom template tags and filters that provides a detailed explanation of how to create and use custom template tags. You can find the documentation here: <a href=\"https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/\">https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/</a>\n</li>\n<li>Django Girls tutorial: The Django Girls tutorial is a free online tutorial that covers the basics of Django. It includes a section on custom template tags that provides a step-by-step guide to creating and using custom template tags in a Django project. You can find the tutorial here: <a href=\"https://tutorial.djangogirls.org/en/django_templates/\">https://tutorial.djangogirls.org/en/django_templates/</a>\n</li>\n<li>Django by Example: Django by Example is a series of tutorials that teaches you how to build web applications with Django. It includes a chapter on custom template tags that shows you how to create and use custom template tags in a Django project. You can find the tutorial here: <a href=\"https://www.djangobyexample.com/book/chapters/template_tags.html\">https://www.djangobyexample.com/book/chapters/template_tags.html</a>\n</li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9cae3fd0a792\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/make-the-most-out-of-the-templates-with-django-custom-template-tags-9cae3fd0a792\">Make the most out of the templates with Django custom template tags</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q2nbco0htO33lZvH.jpg\"><figcaption>custom template tags\u00a0Django</figcaption></figure><p><strong>What are custom template tags in\u00a0Django?</strong></p>\n<p>In Django, template tags are bits of code that are inserted into templates to perform tasks, such as displaying a list of objects, or rendering a form. Template tags can be divided into two categories: built-in tags, which are included in Django, and custom tags, which are created by the developer to perform specific\u00a0tasks.</p>\n<p>Custom template tags are a powerful and flexible way to perform tasks in Django templates. They allow you to encapsulate complex logic in a single tag, and reuse that logic across multiple templates. This can make your templates more readable and easier to maintain.</p>\n<p><strong>Here\u2019s how you can use\u00a0them</strong></p>\n<p>To use custom template tags, you need to create a Django app and define the tags in a templatetags module within the app. The templatetags module should contain a Python module with the same name as the app, and the module should define a register object. The register object is a template tag library that contains the custom tags for the\u00a0app.</p>\n<p>Here\u2019s an example of how to define a custom template tag in\u00a0Django:</p>\n<pre># myapp/templatetags/myapp_tags.py<br>from django import template<br><br>register = template.Library()<br><br>@register.simple_tag<br>def greeting(name):<br>    return \"Hello, \" + name</pre>\n<p>To use the custom template tag in a template, you need to first load the myapp_tags module, and then call the tag using the {% %} syntax. Here's an example of how to use the greeting tag in a template:</p>\n<pre>{% load myapp_tags %}<br><br>{% greeting \"John\" %}</pre>\n<p>This will output the string \u201cHello, John\u201d in the template.</p>\n<p>You can also define more complex template tags that take arguments and perform more advanced tasks. For example, you could define a template tag that displays a list of objects from a database, or that renders a\u00a0form.</p>\n<blockquote><strong>Free resources to learn more about custom template tags in\u00a0Django:</strong></blockquote>\n<ol>\n<li>Django documentation: The Django documentation has a section on custom template tags and filters that provides a detailed explanation of how to create and use custom template tags. You can find the documentation here: <a href=\"https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/\">https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/</a>\n</li>\n<li>Django Girls tutorial: The Django Girls tutorial is a free online tutorial that covers the basics of Django. It includes a section on custom template tags that provides a step-by-step guide to creating and using custom template tags in a Django project. You can find the tutorial here: <a href=\"https://tutorial.djangogirls.org/en/django_templates/\">https://tutorial.djangogirls.org/en/django_templates/</a>\n</li>\n<li>Django by Example: Django by Example is a series of tutorials that teaches you how to build web applications with Django. It includes a chapter on custom template tags that shows you how to create and use custom template tags in a Django project. You can find the tutorial here: <a href=\"https://www.djangobyexample.com/book/chapters/template_tags.html\">https://www.djangobyexample.com/book/chapters/template_tags.html</a>\n</li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9cae3fd0a792\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/make-the-most-out-of-the-templates-with-django-custom-template-tags-9cae3fd0a792\">Make the most out of the templates with Django custom template tags</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["django-template","custom-template-tags","python3","django","learn-django"]},{"title":"Using AJAX with Django","pubDate":"2022-12-19 04:27:18","link":"https://awstip.com/using-ajax-with-django-b7ffb1af15a4?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/b7ffb1af15a4","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/469/0*kzsjcakEqEx7vQCR.png\"><figcaption>How Ajax and Django wok\u00a0together</figcaption></figure><p><strong>Ajax</strong> (Asynchronous JavaScript and XML) is a technique that allows you to make web page updates asynchronously, without the need to reload the entire page. Here is an example of how you can use <strong>Ajax with a Django application:</strong></p>\n<ol><li>\n<strong>Include the jQuery library in your template</strong>: You\u2019ll need to include the jQuery library in your Django template in order to use Ajax. You can do this by adding the following line to the &lt;head&gt; element of your template:</li></ol>\n<pre>&lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;</pre>\n<p>2. <strong>Add an Ajax function to your JavaScript: </strong>Next, you\u2019ll need to add an Ajax function to your JavaScript code. This function will send an HTTP request to the server and update the page with the response. Here is an example of an Ajax function that sends a GET request to a Django view and updates a div element with the response:</p>\n<pre>function updateDiv() {<br>    $.ajax({<br>        type: 'GET',<br>        url: '/ajax/view/',<br>        success: function(response) {<br>            $('#mydiv').html(response);<br>        }<br>    });<br>}</pre>\n<p>3. <strong>Create a Django view to handle the Ajax request:</strong> You\u2019ll need to create a Django view function to handle the Ajax request. This view function should return the data that you want to update on the page. For\u00a0example:</p>\n<pre># views.py<br>from django.http import HttpResponse<br><br>def ajax_view(request):<br>    data = \"This data was updated via Ajax\"<br>    return HttpResponse(data)</pre>\n<p>4. <strong>Add a URL pattern for the view:</strong> You\u2019ll need to add a URL pattern for the view in your urls.py file. For\u00a0example:</p>\n<pre># urls.py<br>from django.urls import path<br>from . import views<br><br>urlpatterns = [<br>    path('ajax/view/', views.ajax_view, name='ajax_view'),<br>]</pre>\n<p>5. <strong>Trigger the Ajax function:</strong> Finally, you\u2019ll need to trigger the Ajax function when you want to update the page. You can do this by adding an event listener to a button or some other element on the page. For\u00a0example:</p>\n<pre>&lt;button onclick=\"updateDiv()\"&gt;Update&lt;/button&gt;</pre>\n<a href=\"https://medium.com/media/29757c8b432afc8a50f7ad03c3c24778/href\">https://medium.com/media/29757c8b432afc8a50f7ad03c3c24778/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b7ffb1af15a4\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/using-ajax-with-django-b7ffb1af15a4\">Using AJAX with Django</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/469/0*kzsjcakEqEx7vQCR.png\"><figcaption>How Ajax and Django wok\u00a0together</figcaption></figure><p><strong>Ajax</strong> (Asynchronous JavaScript and XML) is a technique that allows you to make web page updates asynchronously, without the need to reload the entire page. Here is an example of how you can use <strong>Ajax with a Django application:</strong></p>\n<ol><li>\n<strong>Include the jQuery library in your template</strong>: You\u2019ll need to include the jQuery library in your Django template in order to use Ajax. You can do this by adding the following line to the &lt;head&gt; element of your template:</li></ol>\n<pre>&lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;</pre>\n<p>2. <strong>Add an Ajax function to your JavaScript: </strong>Next, you\u2019ll need to add an Ajax function to your JavaScript code. This function will send an HTTP request to the server and update the page with the response. Here is an example of an Ajax function that sends a GET request to a Django view and updates a div element with the response:</p>\n<pre>function updateDiv() {<br>    $.ajax({<br>        type: 'GET',<br>        url: '/ajax/view/',<br>        success: function(response) {<br>            $('#mydiv').html(response);<br>        }<br>    });<br>}</pre>\n<p>3. <strong>Create a Django view to handle the Ajax request:</strong> You\u2019ll need to create a Django view function to handle the Ajax request. This view function should return the data that you want to update on the page. For\u00a0example:</p>\n<pre># views.py<br>from django.http import HttpResponse<br><br>def ajax_view(request):<br>    data = \"This data was updated via Ajax\"<br>    return HttpResponse(data)</pre>\n<p>4. <strong>Add a URL pattern for the view:</strong> You\u2019ll need to add a URL pattern for the view in your urls.py file. For\u00a0example:</p>\n<pre># urls.py<br>from django.urls import path<br>from . import views<br><br>urlpatterns = [<br>    path('ajax/view/', views.ajax_view, name='ajax_view'),<br>]</pre>\n<p>5. <strong>Trigger the Ajax function:</strong> Finally, you\u2019ll need to trigger the Ajax function when you want to update the page. You can do this by adding an event listener to a button or some other element on the page. For\u00a0example:</p>\n<pre>&lt;button onclick=\"updateDiv()\"&gt;Update&lt;/button&gt;</pre>\n<a href=\"https://medium.com/media/29757c8b432afc8a50f7ad03c3c24778/href\">https://medium.com/media/29757c8b432afc8a50f7ad03c3c24778/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b7ffb1af15a4\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/using-ajax-with-django-b7ffb1af15a4\">Using AJAX with Django</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["python","django","ajax-and-django","ajax","web-development"]},{"title":"Connecting Postgres with Django","pubDate":"2022-12-18 19:05:30","link":"https://awstip.com/connecting-postgres-with-django-c911cb3891bf?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/c911cb3891bf","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/550/0*lYrjeuMB15Zmhnfb.png\"><figcaption>PostgreSQL with\u00a0django</figcaption></figure><p>To connect a Django application to a PostgreSQL database, you will need to install the psycopg2 package, which is a PostgreSQL adapter for Python. You can install it using\u00a0pip:</p>\n<pre>pip install psycopg2</pre>\n<p>Then, in your Django settings file (usually located at project_name/settings.py), you will need to specify the PostgreSQL database connection details. You can do this by setting the DATABASES setting to a dictionary with the following keys:</p>\n<pre>DATABASES = {<br>    'default': {<br>        'ENGINE': 'django.db.backends.postgresql',<br>        'NAME': 'your_database_name',<br>        'USER': 'your_database_user',<br>        'PASSWORD': 'your_database_password',<br>        'HOST': 'localhost',<br>        'PORT': '',<br>    }<br>}</pre>\n<p>Replace your_database_name, your_database_user, and your_database_password with the appropriate values for your PostgreSQL database.</p>\n<p>Once you have specified the connection details, you can create the necessary database tables by running the following command:</p>\n<pre>python manage.py migrate</pre>\n<p>This will create the necessary tables in the PostgreSQL database for the Django application to\u00a0use.</p>\n<p>Finally, you will need to create a superuser account so that you can log in to the Django admin site and manage your data. You can do this by running the following command:</p>\n<pre>python manage.py createsuperuser</pre>\n<p>Enter the requested information to create a superuser account.</p>\n<p>I hope this helps! Let me know if you have any questions.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c911cb3891bf\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/connecting-postgres-with-django-c911cb3891bf\">Connecting Postgres with Django</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/550/0*lYrjeuMB15Zmhnfb.png\"><figcaption>PostgreSQL with\u00a0django</figcaption></figure><p>To connect a Django application to a PostgreSQL database, you will need to install the psycopg2 package, which is a PostgreSQL adapter for Python. You can install it using\u00a0pip:</p>\n<pre>pip install psycopg2</pre>\n<p>Then, in your Django settings file (usually located at project_name/settings.py), you will need to specify the PostgreSQL database connection details. You can do this by setting the DATABASES setting to a dictionary with the following keys:</p>\n<pre>DATABASES = {<br>    'default': {<br>        'ENGINE': 'django.db.backends.postgresql',<br>        'NAME': 'your_database_name',<br>        'USER': 'your_database_user',<br>        'PASSWORD': 'your_database_password',<br>        'HOST': 'localhost',<br>        'PORT': '',<br>    }<br>}</pre>\n<p>Replace your_database_name, your_database_user, and your_database_password with the appropriate values for your PostgreSQL database.</p>\n<p>Once you have specified the connection details, you can create the necessary database tables by running the following command:</p>\n<pre>python manage.py migrate</pre>\n<p>This will create the necessary tables in the PostgreSQL database for the Django application to\u00a0use.</p>\n<p>Finally, you will need to create a superuser account so that you can log in to the Django admin site and manage your data. You can do this by running the following command:</p>\n<pre>python manage.py createsuperuser</pre>\n<p>Enter the requested information to create a superuser account.</p>\n<p>I hope this helps! Let me know if you have any questions.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c911cb3891bf\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/connecting-postgres-with-django-c911cb3891bf\">Connecting Postgres with Django</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["python","postgres","django","sql","postgressql"]},{"title":"Django Caching","pubDate":"2022-12-16 17:28:01","link":"https://awstip.com/django-caching-610bd33a78b7?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/610bd33a78b7","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LwUJQFd-N0fzG7Si.png\"><figcaption>How caching\u00a0works</figcaption></figure><p>Caching is a common technique used in web development to improve the performance of a website or web application by storing frequently-accessed data in a temporary storage location, such as memory or a cache server. Django, a high-level Python web framework, provides built-in support for caching through its caching framework.</p>\n<a href=\"https://medium.com/media/9c038226251564a42cce16ee97411d71/href\">https://medium.com/media/9c038226251564a42cce16ee97411d71/href</a><p>In Django, caching can be applied at various levels, including the view level, template level, and individual object\u00a0level.</p>\n<p>At the view level, Django provides several decorators that can be used to cache the output of a view function. For example, the @cache_page decorator can be used to cache the output of a view function for a specified number of seconds. This is useful for views that generate dynamic content, but do not change frequently.</p>\n<p>At the template level, Django provides the {% cache %} template tag, which allows you to cache a fragment of a template for a specified amount of time. This is useful for template fragments that are expensive to render, but do not change frequently.</p>\n<p>At the object level, Django provides the @cache_on_save and @cache_on_delete decorators, which can be applied to model methods to cache the result of a model method when an object is saved or deleted. This is useful for model methods that are expensive to run, but are called frequently.</p>\n<p>In addition to these built-in caching options, Django also provides a low-level cache API that can be used to store and retrieve data from the cache. This can be useful for custom caching needs that are not covered by the built-in caching\u00a0options.</p>\n<p>Overall, Django\u2019s caching framework provides a range of options for improving the performance of a web application by storing frequently-accessed data in a temporary storage location. By using the appropriate caching strategy for your application, you can significantly improve its performance and scalability.</p>\n<h3><strong>Free Resources</strong></h3>\n<p>There are many resources available for learning about Django caching, including online tutorials, documentation, and video courses. Here are a few places you can\u00a0start:</p>\n<ol>\n<li>Django\u2019s official documentation provides a detailed guide on caching in Django, including information on the different types of caching available and how to use them: <a href=\"https://docs.djangoproject.com/en/3.1/topics/cache/\">https://docs.djangoproject.com/en/3.1/topics/cache/</a>\n</li>\n<li>The Django caching tutorial on the Django Girls website provides a step-by-step guide to using Django\u2019s caching framework, including code examples and explanations: <a href=\"https://tutorial.djangogirls.org/en/django_cache/\">https://tutorial.djangogirls.org/en/django_cache/</a>\n</li>\n<li>The \u201cCaching\u201d section of the Django tutorial on the RealPython website provides a comprehensive overview of Django caching, including best practices and tips for optimizing cache usage: <a href=\"https://realpython.com/caching-in-django/\">https://realpython.com/caching-in-django/</a>\n</li>\n<li>The \u201cCaching\u201d course on the Django Fundamentals Pluralsight video series provides a in-depth look at Django caching, including how to implement caching at different levels and how to use the low-level cache API: <a href=\"https://www.pluralsight.com/courses/django-fundamentals-caching\">https://www.pluralsight.com/courses/django-fundamentals-caching</a>\n</li>\n<li>The \u201cCaching\u201d chapter of the \u201cTwo Scoops of Django\u201d book provides a detailed and practical guide to using Django caching, including tips on choosing the right cache backend and optimizing cache usage: <a href=\"https://www.twoscoopspress.com/products/two-scoops-of-django-3-x/chapters/caching/\">https://www.twoscoopspress.com/products/two-scoops-of-django-3-x/chapters/caching/</a>\n</li>\n</ol>\n<p>I hope these resources are helpful as you learn about Django caching. If you have any specific questions, feel free to ask in the\u00a0comment.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=610bd33a78b7\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/django-caching-610bd33a78b7\">Django Caching</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LwUJQFd-N0fzG7Si.png\"><figcaption>How caching\u00a0works</figcaption></figure><p>Caching is a common technique used in web development to improve the performance of a website or web application by storing frequently-accessed data in a temporary storage location, such as memory or a cache server. Django, a high-level Python web framework, provides built-in support for caching through its caching framework.</p>\n<a href=\"https://medium.com/media/9c038226251564a42cce16ee97411d71/href\">https://medium.com/media/9c038226251564a42cce16ee97411d71/href</a><p>In Django, caching can be applied at various levels, including the view level, template level, and individual object\u00a0level.</p>\n<p>At the view level, Django provides several decorators that can be used to cache the output of a view function. For example, the @cache_page decorator can be used to cache the output of a view function for a specified number of seconds. This is useful for views that generate dynamic content, but do not change frequently.</p>\n<p>At the template level, Django provides the {% cache %} template tag, which allows you to cache a fragment of a template for a specified amount of time. This is useful for template fragments that are expensive to render, but do not change frequently.</p>\n<p>At the object level, Django provides the @cache_on_save and @cache_on_delete decorators, which can be applied to model methods to cache the result of a model method when an object is saved or deleted. This is useful for model methods that are expensive to run, but are called frequently.</p>\n<p>In addition to these built-in caching options, Django also provides a low-level cache API that can be used to store and retrieve data from the cache. This can be useful for custom caching needs that are not covered by the built-in caching\u00a0options.</p>\n<p>Overall, Django\u2019s caching framework provides a range of options for improving the performance of a web application by storing frequently-accessed data in a temporary storage location. By using the appropriate caching strategy for your application, you can significantly improve its performance and scalability.</p>\n<h3><strong>Free Resources</strong></h3>\n<p>There are many resources available for learning about Django caching, including online tutorials, documentation, and video courses. Here are a few places you can\u00a0start:</p>\n<ol>\n<li>Django\u2019s official documentation provides a detailed guide on caching in Django, including information on the different types of caching available and how to use them: <a href=\"https://docs.djangoproject.com/en/3.1/topics/cache/\">https://docs.djangoproject.com/en/3.1/topics/cache/</a>\n</li>\n<li>The Django caching tutorial on the Django Girls website provides a step-by-step guide to using Django\u2019s caching framework, including code examples and explanations: <a href=\"https://tutorial.djangogirls.org/en/django_cache/\">https://tutorial.djangogirls.org/en/django_cache/</a>\n</li>\n<li>The \u201cCaching\u201d section of the Django tutorial on the RealPython website provides a comprehensive overview of Django caching, including best practices and tips for optimizing cache usage: <a href=\"https://realpython.com/caching-in-django/\">https://realpython.com/caching-in-django/</a>\n</li>\n<li>The \u201cCaching\u201d course on the Django Fundamentals Pluralsight video series provides a in-depth look at Django caching, including how to implement caching at different levels and how to use the low-level cache API: <a href=\"https://www.pluralsight.com/courses/django-fundamentals-caching\">https://www.pluralsight.com/courses/django-fundamentals-caching</a>\n</li>\n<li>The \u201cCaching\u201d chapter of the \u201cTwo Scoops of Django\u201d book provides a detailed and practical guide to using Django caching, including tips on choosing the right cache backend and optimizing cache usage: <a href=\"https://www.twoscoopspress.com/products/two-scoops-of-django-3-x/chapters/caching/\">https://www.twoscoopspress.com/products/two-scoops-of-django-3-x/chapters/caching/</a>\n</li>\n</ol>\n<p>I hope these resources are helpful as you learn about Django caching. If you have any specific questions, feel free to ask in the\u00a0comment.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=610bd33a78b7\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/django-caching-610bd33a78b7\">Django Caching</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["django-caching","django","caching-in-django","python"]},{"title":"Populating Django Website Using an External API","pubDate":"2022-08-06 14:48:55","link":"https://awstip.com/populating-django-website-using-an-external-api-46cfdfcb88ec?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/46cfdfcb88ec","author":"Atit Bimali","thumbnail":"","description":"\n<p>An Application Programming Interface(API) is is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. To understand better about API let us take a simple example. If we consider the internet as a <em>restaurant</em> then the API acts as a <em>waiter</em> who serves us the data we request to the Database/Server like the waiter who plays the role of middleman to serve us the food that is available at the restaurant.</p>\n<p>We can use an external or a third party APIs like Google API, News API, IMDB API to populate our Django website. Here I will show you a Django website which will get News Data from <a href=\"https://newsapi.org/\">News API</a> and render the data the way we want in out\u00a0website.</p>\n<p>I have uploaded the source code on my\u00a0<a href=\"https://github.com/AtitBimali/news_api_django_example\"><strong>GitHub</strong></a><strong>.</strong></p>\n<p>First of all go to <a href=\"https://newsapi.org/\">News API</a> and get your <strong>API key</strong> by signing up or logging in with your Account. Now In your <strong>App\u2019s views.py </strong>file add the code like\u00a0this:</p>\n<a href=\"https://medium.com/media/8ac38203b7fcfb8ca16991d8a6e4442d/href\">https://medium.com/media/8ac38203b7fcfb8ca16991d8a6e4442d/href</a><p>Don\u2019t forget to replace the key with your own API\u00a0KEY</p>\n<pre>API_KEY = 'your API KEY'</pre>\n<p>Now to render the data on your Website add the following code in your HTML Template\u00a0file.</p>\n<a href=\"https://medium.com/media/c5801dbbdb25321dec805147bec38961/href\">https://medium.com/media/c5801dbbdb25321dec805147bec38961/href</a><p>When you start up your server you will be able to see something like\u00a0<a href=\"https://freebiehub.pythonanywhere.com/news/\">this</a>.</p>\n<p>But that\u2019s not what we are limited up to, We can even save the data from the API to our Database and use it the way we need. This way we can create more dynamic page by creating a detail page for the item. If you visit the <a href=\"https://freebiehub.pythonanywhere.com/books/\">Books </a>section of <a href=\"https://freebiehub.pythonanywhere.com/\">this </a>website and click any of the Book (uses Google Books API) listed there you will be able to see the detail page of that\u00a0Book.</p>\n<p>Leave a Comment below if you want a guide on making a similar page I discussed above. Know more about me\u00a0:<a href=\"http://---%20%20populating%20django%20website%20using%20an%20external%C2%A0api%20an%20application%20programming%20interface(api)%20is%20is%20a%20way%20for%20two%20or%20more%20computer%20programs%20to%20communicate%20with%20each%20other.%20it%20is%20a%20type%20of%20software%20interface,%20offering%20a%20service%20to%20other%20pieces%20of%20software.%20to%20understand%20better%20about%20api%20let%20us%20take%20a%20simple%20example.%20if%20we%20consider%20the%20internet%20as%20a%20restaurant%20then%20the%20api%20acts%20as%20a%20waiter%20who%20serves%20us%20the%20data%20we%20request%20to%20the%20database/Server%20like%20the%20waiter%20who%20plays%20the%20role%20of%20middleman%20to%20serve%20us%20the%20food%20that%20is%20available%20at%20the%20restaurant.%C2%A0%20We%20can%20use%20an%20external%20or%20a%20third%20party%20APIs%20like%20Google%20API,%20News%20API,%20IMDB%20API%20to%20populate%20our%20Django%20website.%20Here%20I%20will%20show%20you%20a%20Django%20website%20which%20will%20get%20News%20Data%20from%20News%20API%20and%20render%20the%20data%20the%20way%20we%20want%20in%20out%20website.%20%20---%20%20I%20have%20uploaded%20the%20source%20code%20on%20my%20GitHub.%20First%20of%20all%20go%20to%20News%20API%20and%20get%20your%20API%20key%20by%20signing%20up%20or%20logging%20in%20with%20your%20Account.%20Now%20In%20your%20App's%20views.py%20file%20add%20the%20code%20like%20this:%20%20Don't%20forget%20to%20replace%20the%20key%20with%20your%20own%20API%20KEY%20API_KEY%20=%20'your%20API%20KEY'%20Now%20to%20render%20the%20data%20on%20your%20Website%20add%20the%20following%20code%20in%20your%20HTML%20Template%20file.%20%20When%20you%20start%20up%20your%20server%20you%20will%20be%20able%20to%20see%20something%20like%20this.%20But%20that's%20not%20what%20we%20are%20limited%20up%20to,%20We%20can%20even%20save%20the%20data%20from%20the%20API%20to%20our%20Database%20and%20use%20it%20the%20way%20we%20need.%20This%20way%20we%20can%20create%20more%20dynamic%20page%20by%20creating%20a%20detail%20page%20for%20the%20item.%20If%20you%20visit%20the%20Books%20section%20of%20this%20website%20and%20click%20any%20of%20the%20Book%20(uses%20Google%20Books%20API)%20listed%20there%20you%20will%20be%20able%20to%20see%20the%20detail%20page%20of%20that%20Book.%20Leave%20a%20Comment%20below%20if%20you%20want%20a%20guide%20on%20making%20a%20similar%20page%20I%20discussed%20above.%20Know%20more%20about%20me%C2%A0:%20Atit%20Bimali%20Happy%20Coding!\"> Atit\u00a0Bimali</a></p>\n<p>Happy Coding!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=46cfdfcb88ec\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/populating-django-website-using-an-external-api-46cfdfcb88ec\">Populating Django Website Using an External API</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<p>An Application Programming Interface(API) is is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. To understand better about API let us take a simple example. If we consider the internet as a <em>restaurant</em> then the API acts as a <em>waiter</em> who serves us the data we request to the Database/Server like the waiter who plays the role of middleman to serve us the food that is available at the restaurant.</p>\n<p>We can use an external or a third party APIs like Google API, News API, IMDB API to populate our Django website. Here I will show you a Django website which will get News Data from <a href=\"https://newsapi.org/\">News API</a> and render the data the way we want in out\u00a0website.</p>\n<p>I have uploaded the source code on my\u00a0<a href=\"https://github.com/AtitBimali/news_api_django_example\"><strong>GitHub</strong></a><strong>.</strong></p>\n<p>First of all go to <a href=\"https://newsapi.org/\">News API</a> and get your <strong>API key</strong> by signing up or logging in with your Account. Now In your <strong>App\u2019s views.py </strong>file add the code like\u00a0this:</p>\n<a href=\"https://medium.com/media/8ac38203b7fcfb8ca16991d8a6e4442d/href\">https://medium.com/media/8ac38203b7fcfb8ca16991d8a6e4442d/href</a><p>Don\u2019t forget to replace the key with your own API\u00a0KEY</p>\n<pre>API_KEY = 'your API KEY'</pre>\n<p>Now to render the data on your Website add the following code in your HTML Template\u00a0file.</p>\n<a href=\"https://medium.com/media/c5801dbbdb25321dec805147bec38961/href\">https://medium.com/media/c5801dbbdb25321dec805147bec38961/href</a><p>When you start up your server you will be able to see something like\u00a0<a href=\"https://freebiehub.pythonanywhere.com/news/\">this</a>.</p>\n<p>But that\u2019s not what we are limited up to, We can even save the data from the API to our Database and use it the way we need. This way we can create more dynamic page by creating a detail page for the item. If you visit the <a href=\"https://freebiehub.pythonanywhere.com/books/\">Books </a>section of <a href=\"https://freebiehub.pythonanywhere.com/\">this </a>website and click any of the Book (uses Google Books API) listed there you will be able to see the detail page of that\u00a0Book.</p>\n<p>Leave a Comment below if you want a guide on making a similar page I discussed above. Know more about me\u00a0:<a href=\"http://---%20%20populating%20django%20website%20using%20an%20external%C2%A0api%20an%20application%20programming%20interface(api)%20is%20is%20a%20way%20for%20two%20or%20more%20computer%20programs%20to%20communicate%20with%20each%20other.%20it%20is%20a%20type%20of%20software%20interface,%20offering%20a%20service%20to%20other%20pieces%20of%20software.%20to%20understand%20better%20about%20api%20let%20us%20take%20a%20simple%20example.%20if%20we%20consider%20the%20internet%20as%20a%20restaurant%20then%20the%20api%20acts%20as%20a%20waiter%20who%20serves%20us%20the%20data%20we%20request%20to%20the%20database/Server%20like%20the%20waiter%20who%20plays%20the%20role%20of%20middleman%20to%20serve%20us%20the%20food%20that%20is%20available%20at%20the%20restaurant.%C2%A0%20We%20can%20use%20an%20external%20or%20a%20third%20party%20APIs%20like%20Google%20API,%20News%20API,%20IMDB%20API%20to%20populate%20our%20Django%20website.%20Here%20I%20will%20show%20you%20a%20Django%20website%20which%20will%20get%20News%20Data%20from%20News%20API%20and%20render%20the%20data%20the%20way%20we%20want%20in%20out%20website.%20%20---%20%20I%20have%20uploaded%20the%20source%20code%20on%20my%20GitHub.%20First%20of%20all%20go%20to%20News%20API%20and%20get%20your%20API%20key%20by%20signing%20up%20or%20logging%20in%20with%20your%20Account.%20Now%20In%20your%20App's%20views.py%20file%20add%20the%20code%20like%20this:%20%20Don't%20forget%20to%20replace%20the%20key%20with%20your%20own%20API%20KEY%20API_KEY%20=%20'your%20API%20KEY'%20Now%20to%20render%20the%20data%20on%20your%20Website%20add%20the%20following%20code%20in%20your%20HTML%20Template%20file.%20%20When%20you%20start%20up%20your%20server%20you%20will%20be%20able%20to%20see%20something%20like%20this.%20But%20that's%20not%20what%20we%20are%20limited%20up%20to,%20We%20can%20even%20save%20the%20data%20from%20the%20API%20to%20our%20Database%20and%20use%20it%20the%20way%20we%20need.%20This%20way%20we%20can%20create%20more%20dynamic%20page%20by%20creating%20a%20detail%20page%20for%20the%20item.%20If%20you%20visit%20the%20Books%20section%20of%20this%20website%20and%20click%20any%20of%20the%20Book%20(uses%20Google%20Books%20API)%20listed%20there%20you%20will%20be%20able%20to%20see%20the%20detail%20page%20of%20that%20Book.%20Leave%20a%20Comment%20below%20if%20you%20want%20a%20guide%20on%20making%20a%20similar%20page%20I%20discussed%20above.%20Know%20more%20about%20me%C2%A0:%20Atit%20Bimali%20Happy%20Coding!\"> Atit\u00a0Bimali</a></p>\n<p>Happy Coding!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=46cfdfcb88ec\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/populating-django-website-using-an-external-api-46cfdfcb88ec\">Populating Django Website Using an External API</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["python","api","django","api-news","website"]},{"title":"Implementation of DDA Line Drawing Algorithm Using matplotlib and Pyscript.","pubDate":"2022-07-31 10:21:15","link":"https://awstip.com/implementation-of-dda-line-drawing-algorithm-using-matplotlib-and-pyscript-2ed4c71fd0bc?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/2ed4c71fd0bc","author":"Atit Bimali","thumbnail":"","description":"\n<p>In Computer Graphics DDA stands for <strong>Digital Differential Analyzer</strong>, It is one of the method for scan conversion of line. <br>Using <em>Matplotlib</em> we can plot a graph of a line for given two x and y coordinates with the help of DDA algorithm. You may check <a href=\"https://www.javatpoint.com/computer-graphics-dda-algorithm\">this</a> to learn more about DDA ALgorithm and how the equation is generated.</p>\n<p>We can use <a href=\"https://pyscript.net/\"><em>Pyscript</em></a> which allows us to run Python script inside an Html file. This is a relatively new Python Framework which was introduced about a month ago. Save the given code by creating an Html file and you should be able to see the website from which a matplotlib plot can be generated.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/652/1*DJC67u1xtgWAm84EgLrT_g.png\"></figure><a href=\"https://medium.com/media/4af5e2740c9f787659264bd728dcacac/href\">https://medium.com/media/4af5e2740c9f787659264bd728dcacac/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2ed4c71fd0bc\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/implementation-of-dda-line-drawing-algorithm-using-matplotlib-and-pyscript-2ed4c71fd0bc\">Implementation of DDA Line Drawing Algorithm Using matplotlib and Pyscript.</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<p>In Computer Graphics DDA stands for <strong>Digital Differential Analyzer</strong>, It is one of the method for scan conversion of line. <br>Using <em>Matplotlib</em> we can plot a graph of a line for given two x and y coordinates with the help of DDA algorithm. You may check <a href=\"https://www.javatpoint.com/computer-graphics-dda-algorithm\">this</a> to learn more about DDA ALgorithm and how the equation is generated.</p>\n<p>We can use <a href=\"https://pyscript.net/\"><em>Pyscript</em></a> which allows us to run Python script inside an Html file. This is a relatively new Python Framework which was introduced about a month ago. Save the given code by creating an Html file and you should be able to see the website from which a matplotlib plot can be generated.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/652/1*DJC67u1xtgWAm84EgLrT_g.png\"></figure><a href=\"https://medium.com/media/4af5e2740c9f787659264bd728dcacac/href\">https://medium.com/media/4af5e2740c9f787659264bd728dcacac/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2ed4c71fd0bc\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/implementation-of-dda-line-drawing-algorithm-using-matplotlib-and-pyscript-2ed4c71fd0bc\">Implementation of DDA Line Drawing Algorithm Using matplotlib and Pyscript.</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["graphpython","python","dda-algorithm","pyscript","matplotlib"]}]}