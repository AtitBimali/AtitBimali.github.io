{"status":"ok","feed":{"url":"https://medium.com/feed/@atitbimali10","title":"Stories by Atit Bimali on Medium","link":"https://medium.com/@atitbimali10?source=rss-4a298c95c81f------2","author":"","description":"Stories by Atit Bimali on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*nHPY89N-MEGojWerYYn3cw.jpeg"},"items":[{"title":"The Rising Costs of APIs: Implications for Developers and the Innovation Landscape","pubDate":"2023-06-11 11:18:24","link":"https://medium.com/@atitbimali10/the-rising-costs-of-apis-implications-for-developers-and-the-innovation-landscape-654cf00442de?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/654cf00442de","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bfOI5bpxpNuBsjS0\"><figcaption>Photo by <a href=\"https://unsplash.com/@dole777?utm_source=medium&amp;utm_medium=referral\">dole777</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>In today’s rapidly digitizing society, the role of APIs (Application Programming Interfaces) has become increasingly pivotal. APIs serve as the vital link enabling seamless interaction between different software programs. Their significance is particularly evident in the realm of social media platforms like Twitter and Reddit. However, within the developer community, there is a mounting concern regarding the escalating costs associated with these platforms’ APIs.</p>\n<p>Following Elon Musk’s acquisition of the popular social media platform Twitter in 2022, the developer community witnessed significant changes, one of which has been met with resistance — the exorbitant cost of API access.</p>\n<p>An API functions as a conduit, enabling businesses and developers to extract the necessary data without unnecessary complexities. While users engage with Twitter’s visual interface, developers require a means to directly extract meaningful and structured data. Prior to Musk’s intervention, Twitter’s API was largely free, providing developers and business owners alike with accessible data extraction and business automation capabilities.</p>\n<p>However, with the introduction of Twitter API version 2, the landscape underwent a drastic transformation. The new version implemented multiple tiers — Free, Basic, Pro, and Enterprise — each offering different levels of service. While the free tier still exists, the gap between the free and basic tiers, with the latter costing $100 per month, has raised concerns. This poses a significant expense for those exploring side projects or testing out ideas, as it entails recurring monthly costs. The Pro tier is even more extravagant, demanding $5,000 per month.</p>\n<p>Upon examining the actual costs incurred by Twitter in providing API services, it becomes apparent that the pricing may primarily account for data access and convenience. Drawing a comparison with AWS Lambda, an on-demand code execution service offered by Amazon Web Services, the actual execution cost appears to be minimal. Even factoring in additional charges like data transfer and database queries, the maximum amount Twitter would need to spend for a client on the Basic plan is approximately $20 per month. This suggests that the plan may be priced five times higher than necessary.</p>\n<p>This approach of monetizing APIs is not limited to Twitter alone. Reddit, another prominent social media platform, has contemplated adopting a similar model. Reddit’s proposed charge for 50 million API requests stands at $12,000 — an amount significantly higher than the cost per million API requests using AWS Lambda.</p>\n<p>With such exorbitant API costs, there is a growing risk that developers may resort to data scraping. Although web scraping can impose a higher server-side load compared to API calls, it could prove to be a more cost-effective method in the face of steep API charges.</p>\n<p>The trend of monetizing APIs pursued by social media platforms raises critical concerns within the developer community. While it is understandable that these platforms need to generate revenue, there is an escalating demand for striking a balance that doesn’t stifle innovation or hinder the progress of small-scale developers and projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=654cf00442de\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bfOI5bpxpNuBsjS0\"><figcaption>Photo by <a href=\"https://unsplash.com/@dole777?utm_source=medium&amp;utm_medium=referral\">dole777</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>In today’s rapidly digitizing society, the role of APIs (Application Programming Interfaces) has become increasingly pivotal. APIs serve as the vital link enabling seamless interaction between different software programs. Their significance is particularly evident in the realm of social media platforms like Twitter and Reddit. However, within the developer community, there is a mounting concern regarding the escalating costs associated with these platforms’ APIs.</p>\n<p>Following Elon Musk’s acquisition of the popular social media platform Twitter in 2022, the developer community witnessed significant changes, one of which has been met with resistance — the exorbitant cost of API access.</p>\n<p>An API functions as a conduit, enabling businesses and developers to extract the necessary data without unnecessary complexities. While users engage with Twitter’s visual interface, developers require a means to directly extract meaningful and structured data. Prior to Musk’s intervention, Twitter’s API was largely free, providing developers and business owners alike with accessible data extraction and business automation capabilities.</p>\n<p>However, with the introduction of Twitter API version 2, the landscape underwent a drastic transformation. The new version implemented multiple tiers — Free, Basic, Pro, and Enterprise — each offering different levels of service. While the free tier still exists, the gap between the free and basic tiers, with the latter costing $100 per month, has raised concerns. This poses a significant expense for those exploring side projects or testing out ideas, as it entails recurring monthly costs. The Pro tier is even more extravagant, demanding $5,000 per month.</p>\n<p>Upon examining the actual costs incurred by Twitter in providing API services, it becomes apparent that the pricing may primarily account for data access and convenience. Drawing a comparison with AWS Lambda, an on-demand code execution service offered by Amazon Web Services, the actual execution cost appears to be minimal. Even factoring in additional charges like data transfer and database queries, the maximum amount Twitter would need to spend for a client on the Basic plan is approximately $20 per month. This suggests that the plan may be priced five times higher than necessary.</p>\n<p>This approach of monetizing APIs is not limited to Twitter alone. Reddit, another prominent social media platform, has contemplated adopting a similar model. Reddit’s proposed charge for 50 million API requests stands at $12,000 — an amount significantly higher than the cost per million API requests using AWS Lambda.</p>\n<p>With such exorbitant API costs, there is a growing risk that developers may resort to data scraping. Although web scraping can impose a higher server-side load compared to API calls, it could prove to be a more cost-effective method in the face of steep API charges.</p>\n<p>The trend of monetizing APIs pursued by social media platforms raises critical concerns within the developer community. While it is understandable that these platforms need to generate revenue, there is an escalating demand for striking a balance that doesn’t stifle innovation or hinder the progress of small-scale developers and projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=654cf00442de\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["twitter-api","twitter","elon-musk","meta","api"]},{"title":"Breaking the Code: How I Hacked a Site and Gained Control Over Any Blog Post","pubDate":"2023-04-27 14:58:12","link":"https://medium.com/@atitbimali10/breaking-the-code-how-i-hacked-a-site-and-gained-control-over-any-blog-post-d1df4fc4fa03?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/d1df4fc4fa03","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X3_ZTslTD2Xrhlqz\"><figcaption>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral\">Ferenc Almasi</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>As a web developer, I know how important it is to prioritize website security. However, it wasn’t until I stumbled upon a vulnerability on sites that I truly realized the potential dangers of not properly validating user requests. I will refer the site as “<strong>ABC” as</strong> of now.</p>\n<p>“<strong>ABC</strong>” is a site that provides helpful blogs on topics related to web development. I had come across it a few times while searching for information on Django. One day, while browsing the site, I noticed something interesting when I had a mitm proxy running in the background.</p>\n<p>I decided to sign up for the site using my Google account, and everything seemed to be normal. I decided to test out the UI by writing a simple article. After adding one line of text, an image, and saving the post, I updated it. As I was looking at the requests being sent to the server, I noticed something strange.</p>\n<p>The article ID was being sent as a request, and there was no validation to check if the user making the request was the original user who posted it. This meant that anyone could make a request to edit any blog post and the server would accept it without question.</p>\n<p>I was able to exploit this vulnerability and edit any blog post on the site, changing the status to “approved” by myself. This was a serious security risk that could have had major consequences if someone with malicious intent had taken advantage of it.</p>\n<p>This experience made me realize how crucial it is to properly validate user requests. When a user requests to edit a blog post, the server should check whether the request was made by the original user who created the post. If the credentials do not match, the server should reject the request.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d1df4fc4fa03\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X3_ZTslTD2Xrhlqz\"><figcaption>Photo by <a href=\"https://unsplash.com/@flowforfrank?utm_source=medium&amp;utm_medium=referral\">Ferenc Almasi</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>As a web developer, I know how important it is to prioritize website security. However, it wasn’t until I stumbled upon a vulnerability on sites that I truly realized the potential dangers of not properly validating user requests. I will refer the site as “<strong>ABC” as</strong> of now.</p>\n<p>“<strong>ABC</strong>” is a site that provides helpful blogs on topics related to web development. I had come across it a few times while searching for information on Django. One day, while browsing the site, I noticed something interesting when I had a mitm proxy running in the background.</p>\n<p>I decided to sign up for the site using my Google account, and everything seemed to be normal. I decided to test out the UI by writing a simple article. After adding one line of text, an image, and saving the post, I updated it. As I was looking at the requests being sent to the server, I noticed something strange.</p>\n<p>The article ID was being sent as a request, and there was no validation to check if the user making the request was the original user who posted it. This meant that anyone could make a request to edit any blog post and the server would accept it without question.</p>\n<p>I was able to exploit this vulnerability and edit any blog post on the site, changing the status to “approved” by myself. This was a serious security risk that could have had major consequences if someone with malicious intent had taken advantage of it.</p>\n<p>This experience made me realize how crucial it is to properly validate user requests. When a user requests to edit a blog post, the server should check whether the request was made by the original user who created the post. If the credentials do not match, the server should reject the request.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d1df4fc4fa03\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["cybersecurity-awareness","cybersecurity","api","hacking","vulnerability"]},{"title":"Dockerizing your Django Web Application","pubDate":"2022-12-25 05:53:29","link":"https://awstip.com/dockerizing-your-django-web-application-8ccaee0d52ea?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/8ccaee0d52ea","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*I16iTgHUKLc558Dp.png\"><figcaption>Docker, django, gunicorn, nginx, aws</figcaption></figure><p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. This makes it easier to develop, test, and deploy applications, because you can be sure that your application will work in any environment that has Docker installed.</p>\n<p>In this article, we’ll walk through the process of using Docker with a Django web application.</p>\n<h3>Prerequisites</h3>\n<p>Before you start, you’ll need to have the following installed on your machine:</p>\n<ul><li>Docker: You can download Docker from the <a href=\"https://www.docker.com/\">Docker website</a>.</li></ul>\n<h3>Step 1: Create a Docker file</h3>\n<p>The first step in using Docker with a Django web application is to create a Dockerfile. This file contains the instructions for building the Docker image for your application.</p>\n<p>To create a Dockerfile, create a new file in the root directory of your Django project and name it Dockerfile. Then, open the file in a text editor and add the following lines:</p>\n<pre>FROM python:3.8<br><br>COPY requirements.txt .<br>RUN pip install -r requirements.txt<br><br>COPY . .<br><br>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]</pre>\n<p>Let’s go over each line in this Dockerfile:</p>\n<ul>\n<li>FROM python:3.8: This line specifies the base image that we want to use for our application. In this case, we're using the official Python image with version 3.8.</li>\n<li>COPY requirements.txt .: This line copies the requirements.txt file from the root directory of our Django project into the image. This file contains a list of all of the Python packages that our application requires.</li>\n<li>RUN pip install -r requirements.txt: This line installs all of the required Python packages using the pip package manager.</li>\n<li>COPY . .: This line copies the rest of the files in the root directory of our Django project into the image. This includes all of the Django source code and other files that our application needs.</li>\n<li>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]: This line specifies the command to run the Django development server. This will allow us to run our application in a development environment using Docker.</li>\n</ul>\n<h3>Step 2: Build the Docker image</h3>\n<p>Now that we have a Dockerfile, we can use it to build the Docker image for our Django application.</p>\n<p>To build the image, open a terminal and navigate to the root directory of your Django project. Then, run the following command:</p>\n<pre>docker build -t myproject .</pre>\n<p>This will build the Docker image using the instructions in the Dockerfile. The -t flag specifies a name for the image, which in this case is \"myproject\". The . at the end of the command tells Docker to look for the Dockerfile in the current directory.</p>\n<h3>Step 3: Run the Docker image</h3>\n<p>Once the Docker image has been built, we can use it to run our Django application.</p>\n<p>To run the image, use the following command:</p>\n<pre>docker run -p</pre>\n<h3><strong>Useful resources to learn more about using Docker with Django:</strong></h3>\n<ul>\n<li>The official Docker documentation has a <a href=\"https://docs.docker.com/compose/django/\">Getting Started with Django</a> tutorial that shows you how to use Docker to set up and run a Django web application.</li>\n<li>The Django documentation has a <a href=\"https://docs.djangoproject.com/en/3.1/howto/deployment/docker/\">Docker tutorial</a> that covers using Docker with Django in more detail.</li>\n<li>\n<a href=\"https://docs.docker.com/compose/\">Docker Compose</a> is a tool that allows you to define and run multi-container Docker applications. It is particularly useful for Django applications, as it allows you to define the different components of your application (such as the web server, database, and background workers) in a single configuration file.</li>\n<li>The <a href=\"https://djangopackages.org/\">Django Packages</a> website has a list of Django packages that can help you with various aspects of using Docker with Django, such as deploying Django applications to Docker containers or managing Docker containers from within Django.</li>\n<li>\n<a href=\"https://realpython.com/\">Real Python</a> has a <a href=\"https://realpython.com/docker-django/\">tutorial on using Docker with Django</a> that covers the basics of using Docker with Django and goes into more advanced topics such as using Docker Compose and deploying Django applications to production.</li>\n</ul>\n<p>If you have any further questions or need additional guidance, don’t hesitate to ask. I’m here to help! Thank you for reading, and I hope you found the information helpful.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gHB7APpY9AjPnQkd\"><figcaption>Photo by <a href=\"https://unsplash.com/@toddcravens?utm_source=medium&amp;utm_medium=referral\">Todd Cravens</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8ccaee0d52ea\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/dockerizing-your-django-web-application-8ccaee0d52ea\">Dockerizing your Django Web Application</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*I16iTgHUKLc558Dp.png\"><figcaption>Docker, django, gunicorn, nginx, aws</figcaption></figure><p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. This makes it easier to develop, test, and deploy applications, because you can be sure that your application will work in any environment that has Docker installed.</p>\n<p>In this article, we’ll walk through the process of using Docker with a Django web application.</p>\n<h3>Prerequisites</h3>\n<p>Before you start, you’ll need to have the following installed on your machine:</p>\n<ul><li>Docker: You can download Docker from the <a href=\"https://www.docker.com/\">Docker website</a>.</li></ul>\n<h3>Step 1: Create a Docker file</h3>\n<p>The first step in using Docker with a Django web application is to create a Dockerfile. This file contains the instructions for building the Docker image for your application.</p>\n<p>To create a Dockerfile, create a new file in the root directory of your Django project and name it Dockerfile. Then, open the file in a text editor and add the following lines:</p>\n<pre>FROM python:3.8<br><br>COPY requirements.txt .<br>RUN pip install -r requirements.txt<br><br>COPY . .<br><br>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]</pre>\n<p>Let’s go over each line in this Dockerfile:</p>\n<ul>\n<li>FROM python:3.8: This line specifies the base image that we want to use for our application. In this case, we're using the official Python image with version 3.8.</li>\n<li>COPY requirements.txt .: This line copies the requirements.txt file from the root directory of our Django project into the image. This file contains a list of all of the Python packages that our application requires.</li>\n<li>RUN pip install -r requirements.txt: This line installs all of the required Python packages using the pip package manager.</li>\n<li>COPY . .: This line copies the rest of the files in the root directory of our Django project into the image. This includes all of the Django source code and other files that our application needs.</li>\n<li>CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]: This line specifies the command to run the Django development server. This will allow us to run our application in a development environment using Docker.</li>\n</ul>\n<h3>Step 2: Build the Docker image</h3>\n<p>Now that we have a Dockerfile, we can use it to build the Docker image for our Django application.</p>\n<p>To build the image, open a terminal and navigate to the root directory of your Django project. Then, run the following command:</p>\n<pre>docker build -t myproject .</pre>\n<p>This will build the Docker image using the instructions in the Dockerfile. The -t flag specifies a name for the image, which in this case is \"myproject\". The . at the end of the command tells Docker to look for the Dockerfile in the current directory.</p>\n<h3>Step 3: Run the Docker image</h3>\n<p>Once the Docker image has been built, we can use it to run our Django application.</p>\n<p>To run the image, use the following command:</p>\n<pre>docker run -p</pre>\n<h3><strong>Useful resources to learn more about using Docker with Django:</strong></h3>\n<ul>\n<li>The official Docker documentation has a <a href=\"https://docs.docker.com/compose/django/\">Getting Started with Django</a> tutorial that shows you how to use Docker to set up and run a Django web application.</li>\n<li>The Django documentation has a <a href=\"https://docs.djangoproject.com/en/3.1/howto/deployment/docker/\">Docker tutorial</a> that covers using Docker with Django in more detail.</li>\n<li>\n<a href=\"https://docs.docker.com/compose/\">Docker Compose</a> is a tool that allows you to define and run multi-container Docker applications. It is particularly useful for Django applications, as it allows you to define the different components of your application (such as the web server, database, and background workers) in a single configuration file.</li>\n<li>The <a href=\"https://djangopackages.org/\">Django Packages</a> website has a list of Django packages that can help you with various aspects of using Docker with Django, such as deploying Django applications to Docker containers or managing Docker containers from within Django.</li>\n<li>\n<a href=\"https://realpython.com/\">Real Python</a> has a <a href=\"https://realpython.com/docker-django/\">tutorial on using Docker with Django</a> that covers the basics of using Docker with Django and goes into more advanced topics such as using Docker Compose and deploying Django applications to production.</li>\n</ul>\n<p>If you have any further questions or need additional guidance, don’t hesitate to ask. I’m here to help! Thank you for reading, and I hope you found the information helpful.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gHB7APpY9AjPnQkd\"><figcaption>Photo by <a href=\"https://unsplash.com/@toddcravens?utm_source=medium&amp;utm_medium=referral\">Todd Cravens</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8ccaee0d52ea\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/dockerizing-your-django-web-application-8ccaee0d52ea\">Dockerizing your Django Web Application</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["dockerizing-your-django","django-and-docker","docker","django"]},{"title":"Make the most out of the templates with Django custom template tags","pubDate":"2022-12-20 15:47:45","link":"https://awstip.com/make-the-most-out-of-the-templates-with-django-custom-template-tags-9cae3fd0a792?source=rss-4a298c95c81f------2","guid":"https://medium.com/p/9cae3fd0a792","author":"Atit Bimali","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q2nbco0htO33lZvH.jpg\"><figcaption>custom template tags Django</figcaption></figure><p><strong>What are custom template tags in Django?</strong></p>\n<p>In Django, template tags are bits of code that are inserted into templates to perform tasks, such as displaying a list of objects, or rendering a form. Template tags can be divided into two categories: built-in tags, which are included in Django, and custom tags, which are created by the developer to perform specific tasks.</p>\n<p>Custom template tags are a powerful and flexible way to perform tasks in Django templates. They allow you to encapsulate complex logic in a single tag, and reuse that logic across multiple templates. This can make your templates more readable and easier to maintain.</p>\n<p><strong>Here’s how you can use them</strong></p>\n<p>To use custom template tags, you need to create a Django app and define the tags in a templatetags module within the app. The templatetags module should contain a Python module with the same name as the app, and the module should define a register object. The register object is a template tag library that contains the custom tags for the app.</p>\n<p>Here’s an example of how to define a custom template tag in Django:</p>\n<pre># myapp/templatetags/myapp_tags.py<br>from django import template<br><br>register = template.Library()<br><br>@register.simple_tag<br>def greeting(name):<br>    return \"Hello, \" + name</pre>\n<p>To use the custom template tag in a template, you need to first load the myapp_tags module, and then call the tag using the {% %} syntax. Here's an example of how to use the greeting tag in a template:</p>\n<pre>{% load myapp_tags %}<br><br>{% greeting \"John\" %}</pre>\n<p>This will output the string “Hello, John” in the template.</p>\n<p>You can also define more complex template tags that take arguments and perform more advanced tasks. For example, you could define a template tag that displays a list of objects from a database, or that renders a form.</p>\n<blockquote><strong>Free resources to learn more about custom template tags in Django:</strong></blockquote>\n<ol>\n<li>Django documentation: The Django documentation has a section on custom template tags and filters that provides a detailed explanation of how to create and use custom template tags. You can find the documentation here: <a href=\"https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/\">https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/</a>\n</li>\n<li>Django Girls tutorial: The Django Girls tutorial is a free online tutorial that covers the basics of Django. It includes a section on custom template tags that provides a step-by-step guide to creating and using custom template tags in a Django project. You can find the tutorial here: <a href=\"https://tutorial.djangogirls.org/en/django_templates/\">https://tutorial.djangogirls.org/en/django_templates/</a>\n</li>\n<li>Django by Example: Django by Example is a series of tutorials that teaches you how to build web applications with Django. It includes a chapter on custom template tags that shows you how to create and use custom template tags in a Django project. You can find the tutorial here: <a href=\"https://www.djangobyexample.com/book/chapters/template_tags.html\">https://www.djangobyexample.com/book/chapters/template_tags.html</a>\n</li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9cae3fd0a792\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/make-the-most-out-of-the-templates-with-django-custom-template-tags-9cae3fd0a792\">Make the most out of the templates with Django custom template tags</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q2nbco0htO33lZvH.jpg\"><figcaption>custom template tags Django</figcaption></figure><p><strong>What are custom template tags in Django?</strong></p>\n<p>In Django, template tags are bits of code that are inserted into templates to perform tasks, such as displaying a list of objects, or rendering a form. Template tags can be divided into two categories: built-in tags, which are included in Django, and custom tags, which are created by the developer to perform specific tasks.</p>\n<p>Custom template tags are a powerful and flexible way to perform tasks in Django templates. They allow you to encapsulate complex logic in a single tag, and reuse that logic across multiple templates. This can make your templates more readable and easier to maintain.</p>\n<p><strong>Here’s how you can use them</strong></p>\n<p>To use custom template tags, you need to create a Django app and define the tags in a templatetags module within the app. The templatetags module should contain a Python module with the same name as the app, and the module should define a register object. The register object is a template tag library that contains the custom tags for the app.</p>\n<p>Here’s an example of how to define a custom template tag in Django:</p>\n<pre># myapp/templatetags/myapp_tags.py<br>from django import template<br><br>register = template.Library()<br><br>@register.simple_tag<br>def greeting(name):<br>    return \"Hello, \" + name</pre>\n<p>To use the custom template tag in a template, you need to first load the myapp_tags module, and then call the tag using the {% %} syntax. Here's an example of how to use the greeting tag in a template:</p>\n<pre>{% load myapp_tags %}<br><br>{% greeting \"John\" %}</pre>\n<p>This will output the string “Hello, John” in the template.</p>\n<p>You can also define more complex template tags that take arguments and perform more advanced tasks. For example, you could define a template tag that displays a list of objects from a database, or that renders a form.</p>\n<blockquote><strong>Free resources to learn more about custom template tags in Django:</strong></blockquote>\n<ol>\n<li>Django documentation: The Django documentation has a section on custom template tags and filters that provides a detailed explanation of how to create and use custom template tags. You can find the documentation here: <a href=\"https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/\">https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/</a>\n</li>\n<li>Django Girls tutorial: The Django Girls tutorial is a free online tutorial that covers the basics of Django. It includes a section on custom template tags that provides a step-by-step guide to creating and using custom template tags in a Django project. You can find the tutorial here: <a href=\"https://tutorial.djangogirls.org/en/django_templates/\">https://tutorial.djangogirls.org/en/django_templates/</a>\n</li>\n<li>Django by Example: Django by Example is a series of tutorials that teaches you how to build web applications with Django. It includes a chapter on custom template tags that shows you how to create and use custom template tags in a Django project. You can find the tutorial here: <a href=\"https://www.djangobyexample.com/book/chapters/template_tags.html\">https://www.djangobyexample.com/book/chapters/template_tags.html</a>\n</li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9cae3fd0a792\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://awstip.com/make-the-most-out-of-the-templates-with-django-custom-template-tags-9cae3fd0a792\">Make the most out of the templates with Django custom template tags</a> was originally published in <a href=\"https://awstip.com/\">AWS Tip</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["django-template","custom-template-tags","python3","django","learn-django"]}]}